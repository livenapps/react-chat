{"version":3,"sources":["components/App/constants.js","components/App/index.js","serviceWorker.js","index.js"],"names":["server","URL","App","props","state","usersCount","userName","localStorage","getItem","userId","userMessage","messages","users","Map","socket","io","subscribeOnSocketEvents","onLeaveWindow","setUserName","bind","setUserMessage","sendUserMessage","e","this","setState","target","value","on","console","warn","log","message","event","data","preventDefault","send","name","window","addEventListener","setItem","Fragment","className","type","onChange","map","i","date","Date","key","getHours","getMinutes","getSeconds","onSubmit","id","rows","React","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.89a198eb.chunk.js","sourcesContent":["const server = {\n    URL: 'https://ws-server-chat.herokuapp.com',\n};\n\nexport {server};","import React from 'react';\nimport './styles.scss';\nimport io from 'socket.io-client';\nimport {server} from './constants';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      usersCount: 0,\n      userName: localStorage.getItem('userName') || '',\n      userId: '',\n      userMessage: '',\n      messages: [],\n      users: new Map(),\n    };\n\n    this.socket = io(server.URL);\n\n    this.subscribeOnSocketEvents();\n    this.onLeaveWindow();\n\n    this.setUserName = this.setUserName.bind(this);\n    this.setUserMessage = this.setUserMessage.bind(this);\n    this.sendUserMessage = this.sendUserMessage.bind(this);\n  }\n\n  setUserName(e) {\n    this.setState({\n      userName: e.target.value\n    });\n  }\n\n  setUserMessage(e) {\n    this.setState({\n      userMessage: e.target.value\n    });\n  }\n\n  subscribeOnSocketEvents() {\n    this.socket.on('connect', () => {\n      console.warn('You are connected');\n    });\n    this.socket.on('reconnect', () => {\n      console.warn('You are reconnected');\n    });\n    this.socket.on('disconnect', () => {\n      console.log('You are disconnected');\n    });\n    this.socket.on('event', (e) => {\n      console.log(e);\n    });\n\n    this.socket.on('message', (message) => {\n      if (message.event === 'sent' || message.event === 'received') {\n        this.setState({\n          messages: [...this.state.messages, message.data],\n        });\n      } else if (message.event === 'connected') {\n        console.log('connected', message.data);\n        this.setState({\n          userId: message.data.userId,\n          usersCount: message.data.usersCount,\n        });\n      } else if (message.event === 'userJoined') {\n        console.log('userJoined', message.data);\n        this.setState({usersCount: message.data.usersCount});\n      } else if (message.event === 'userLeft') {\n        this.setState({usersCount: message.data.usersCount});\n      }\n    });\n  }\n\n  sendUserMessage(e) {\n    e.preventDefault();\n\n    this.state.userMessage && this.socket.send({\n      name: this.state.userName,\n      message: this.state.userMessage,\n    });\n  }\n\n  onLeaveWindow() {\n    window.addEventListener('beforeunload', ()=>{\n      localStorage.setItem('userName', this.state.userName);\n    });\n  }\n\n  render() {\n    return <React.Fragment>\n      <header className=\"chat__header\">\n        <h1 className=\"chat__title\">\n          socket.io / context api + hooks / jest / typescript\n        </h1>\n        <h2 className=\"chat__subtitle\">\n          {`Hello, ${this.state.userName}`}\n        </h2>\n        <h2 className=\"chat__subtitle\">\n          {`Now in chat ${this.state.usersCount} people`}\n        </h2>\n      </header>\n      <div className=\"chat__main-wrapper\">\n        <aside className=\"chat__sidebar\">\n          <fieldset className=\"chat__fieldset\">\n            <legend className=\"chat__legend\">\n              Insert/change your name:\n            </legend>\n            <input className=\"chat__input chat__input--name\" type=\"text\" value={this.state.userName}\n                   onChange={this.setUserName}/>\n          </fieldset>\n        </aside>\n        <section className=\"chat__messages\">\n          <div className=\"chat__messages-wrapper\">\n            {this.state.messages.map((message, i) => {\n              const date = new Date(message.date);\n\n              return <article key={i} className=\"chat__message message\">\n                <header className=\"message__header\">\n                  <span className=\"message__author\">{message.name}</span>\n                  <time className=\"message__time\">{`${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`}</time>\n                </header>\n                <main className=\"message__content\">{message.message}</main>\n              </article>;\n            })}\n          </div>\n        </section>\n      </div>\n      <form className=\"chat__input-area input-area\" onSubmit={this.sendUserMessage}>\n        <textarea className=\"input-area__text-input\" name=\"input-area\" id=\"input-area\" rows=\"3\"\n                  value={this.state.userMessage} onChange={this.setUserMessage}/>\n        <button className=\"input-area__btn\" type=\"submit\">Send</button>\n      </form>\n    </React.Fragment>;\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. Index is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('chat'));\n\nserviceWorker.register();\n"],"sourceRoot":""}